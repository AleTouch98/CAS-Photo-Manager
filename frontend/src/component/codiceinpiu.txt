//CHIAVE API PER GOOGLE
AIzaSyBkxbpPgM2nZmcStlyWZ8r4U1SoGOMOLjk
AIzaSyDZFUwx5LUuoZp1vHzjOGZ7DHAfHHuYTOw
AIzaSyB7M--kaj9HFR8oK1ScipF01-xpPXG2Sw8AIzaSyB7M--kaj9HFR8oK1ScipF01-xpPXG2Sw8

//CODICE DEI FILTRI

<div style={{ display: 'flex', justifyContent: 'space-evenly', width: '1000px', position: 'absolute', top: '70px', left: '350px', right: '0' }}>
      <div style={{ border: '2px solid black', marginRight: '10px', padding: '10px' }}>
        <button onClick={handleGeojsonPopupOpen}>Seleziona Geojson</button>
        {isGeojsonPopupOpen && (
          <div style={{ position: 'absolute', backgroundColor: 'white', zIndex: 999 }}>
            <h3>Scegli un GeoJSON:</h3>
            <ul>
              {geojsonList.map((geojson, index) => (
                <li key={index}>
                  <button onClick={() => handleSelectGeoJSON(geojson)}>{geojson.name}</button>
                </li>
              ))}
            </ul>
            <button onClick={handleGeojsonPopupClose}>Chiudi</button>
          </div>
        )}
      </div>

        <div style={{ border: '2px solid black', marginRight: '10px', padding: '10px' }}>
          Filtri 2
          {/* Qui puoi aggiungere ulteriori informazioni o componenti per il filtro 2 */}
        </div>
        <div style={{ border: '2px solid black', padding: '10px' }}>
          Filtri 3
          {/* Qui puoi aggiungere ulteriori informazioni o componenti per il filtro 3 */}
        </div>
      </div>



      CODICE MAP COMPONENT
  /*
  useEffect(() => {  // utilizzato per caricare la mappa 
    if (!mapRef.current) {
      mapRef.current = L.map('map').setView([41.9028, 12.4964], 5);
    }
    mapRef.current.eachLayer((layer) => { // Rimuovi tutti i layer esistenti prima di aggiungere il nuovo layer
      mapRef.current.removeLayer(layer);
    });
    if (selectedOption === 'option1') {     // Aggiungi il layer di mappa in base all'opzione selezionata
      OpenStreetMap_Mapnik.addTo(mapRef.current);
    } else if (selectedOption === 'option2') {
      Stadia_StamenTerrain.addTo(mapRef.current);
    }
  }, [selectedOption]);
*/








import React, { useState } from 'react';
import ImageList from '@mui/material/ImageList';
import ImageListItem from '@mui/material/ImageListItem';
import ImageListItemBar from '@mui/material/ImageListItemBar';
import IconButton from '@mui/material/IconButton';
import InfoIcon from '@mui/icons-material/Info';
import { Typography } from '@mui/material';
import FilterCollectionIcon from '@mui/icons-material/Filter';
import FilterAltIcon from '@mui/icons-material/FilterAlt';
import PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';
import Popover from '@mui/material/Popover';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import DeleteIcon from '@mui/icons-material/Delete';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import Box from '@mui/material/Box';

export default function TitlebarImageList() {
  const { userId } = useParams();
  const [images, setImages] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);

  const handleAllPhoto = async () => {
    console.log('Ho cliccato su tutte le foto');
    try {
      const result = await axios.get(`http://localhost:8000/dashboard/${userId}/photos`);
      if (result.status === 200) {
        console.log(result.data);
        const immagini = result.data.immagini;
        setImages(immagini);
      } else {
        alert(result.data.message);
      }
    } catch (error) {
      console.error('Errore durante il recupero delle immagini:', error);
    }
  };

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);

  return (
    <div style={{ width: '100%', overflowX: 'auto' }}>
      {/* CREAZIONE DEI BOTTONI */}
      <PopupState variant="popover" popupId="demo-popup-menu">
        {(popupState) => (
          <React.Fragment>
            <IconButton color="primary" variant="contained" {...bindTrigger(popupState)} style={{ position: 'relative', marginTop: '10px', marginBottom: '-10px' }}>
              <Typography variant="inherit" style={{ display: 'flex', alignItems: 'center', marginLeft: '20px', marginRight: '50px', marginTop: '0px', color: 'black', fontSize: '17px' }}>
                <FilterCollectionIcon style={{ marginRight: '8px' }} />  Collezione
              </Typography>
            </IconButton>
            <Popover
              {...bindPopover(popupState)}
              anchorOrigin={{
                vertical: 'bottom',
                horizontal: 'left',
              }}
              transformOrigin={{
                vertical: 'top',
                horizontal: 'left',
              }}
            >
              <Menu>
                <MenuItem onClick={popupState.close}>Collezione 1</MenuItem>
                <MenuItem onClick={popupState.close}>Collezione 2</MenuItem>
                <MenuItem onClick={popupState.close}>Collezione 3</MenuItem>
              </Menu>
            </Popover>
          </React.Fragment>
        )}
      </PopupState>

      <IconButton color="primary" variant="contained" onClick={handleAllPhoto} style={{ position: 'relative', marginTop: '10px', marginBottom: '-10px' }}>
        <Typography variant="inherit" style={{ display: 'flex', alignItems: 'center', marginLeft: '0px', marginRight: '30px', marginTop: '0px', color: 'black', fontSize: '17px' }}>
          <FilterAltIcon style={{ marginRight: '8px' }} />  Tutte le foto
        </Typography>
      </IconButton>

      <ImageList sx={{ width: '100%', maxHeight: '81.06vh', paddingTop: '0px', overflowY: 'auto' }}>
        {images.map((image, index) => (
          <ImageListItem key={index}>
            <img
              style={{ width: '100%', height: 'auto' }}
              src={`data:image/jpeg;base64,${image.immaginebase64}`} // Usa 'data:image/jpeg;base64,' per visualizzare immagini in formato base64
              alt={`Image ${index}`}
              loading="lazy"
            />
            <ImageListItemBar
              title={`${image.nome_foto}`} // Puoi personalizzare il titolo come preferisci
              actionIcon={
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <IconButton
                    sx={{ color: 'rgba(255, 255, 255, 0.54)' }}
                    aria-label={`info about Image ${index}`}
                    onClick={handleClick}
                  >
                    <InfoIcon />
                  </IconButton>
                  <IconButton
                    sx={{ color: 'rgba(255, 255, 255, 0.54)' }}
                    aria-label={`delete Image ${index}`}
                    // Aggiungi la funzione per eliminare l'immagine
                  >
                    <DeleteIcon />
                  </IconButton>
                </div>
              }
            />
            <Popover
              open={open}
              anchorEl={anchorEl}
              onClose={handleClose}
              anchorOrigin={{
                vertical: 'bottom',
                horizontal: 'left',
              }}
              transformOrigin={{
                vertical: 'top',
                horizontal: 'left',
              }}
            >
              <Box p={1}>
                <Typography variant="h6">Informazioni:</Typography>
                <Typography variant="body1">Nome Foto: {image.nome_foto}</Typography>
                <Typography variant="body1">Autore: {image.autore}</Typography>
                <Typography variant="body1">Posizione: {image.posizione}</Typography>
              </Box>
            </Popover>
          </ImageListItem>
        ))}
      </ImageList>
    </div>
  );
}
